# Device type specific file for SonOff TH16 Climate

packages:
  device_sonoff_basic: !include .base.yaml

# Node info
esphome:
  name: ${node_name}
  comment: ${node_comment}
  friendly_name: ${node_friendly_name}

esp32:
  board: nodemcu-32s

logger:
  level: INFO
# baud_rate: 0

uart:
  rx_pin: GPIO16
  baud_rate: 4800
  parity: EVEN

time:
  - platform: homeassistant
    id: homeassistant_time

sensor:
  - platform: cse7766
    current:
      name: ${node_name} Current
      id: a_sensor
      filters:
        - throttle_average: 60s
    voltage:
      name: ${node_name} Voltage
      id: v_sensor
      filters:
        - throttle_average: 60s
    power:
      name: ${node_name} Power
      id: w_sensor
      filters:
        - throttle_average: 60s
    energy:
      name: ${node_name} Energy
      id: wh_sensor
      filters:
        - throttle_average: 60s
    apparent_power:
      name: ${node_name} Apparent Power
      id: ap_sensor
      filters:
        - throttle_average: 60s
    reactive_power:
      name: ${node_name} Reactive Power
      id: rp_sensor
      filters:
        - throttle_average: 60s
    power_factor:
      name: ${node_name} Power Factor
      id: pf_sensor
      filters:
        - throttle_average: 60s
  - platform: total_daily_energy
    name: ${node_name} Total Daily Energy
    power_id: w_sensor
    unit_of_measurement: "kWh"
    state_class: total_increasing
    device_class: energy
    accuracy_decimals: 3
    filters:
      # Multiplication factor from W to kW is 0.001
      - multiply: 0.001
  - platform: template
    device_class: temperature
    unit_of_measurement: Â°C
    id: myEsp32InternalTemp
    internal: True
    lambda: return temperatureRead();
  - platform: template
    name: ${node_name} Power Factor Template
    device_class: power_factor
    lambda: return id(w_sensor).state / id(v_sensor).state / id(a_sensor).state;

binary_sensor:
  - platform: gpio
    id: myButton
    internal: true
    pin:
      number: GPIO0
      inverted: true
    filters:
      - delayed_off: 10ms
    on_click:
      - max_length: 350ms # short press to toggle the relay
        then:
          switch.toggle: myRelay
      - min_length: 360ms # long press to cycle display info
        max_length: 3s
        then:
          - if:
              condition:
                binary_sensor.is_on: page
              then:
                binary_sensor.template.publish:
                  id: page
                  state: OFF
              else:
                binary_sensor.template.publish:
                  id: page
                  state: ON
  - platform: template # this is a fake sensor to tell the screen which info to show on display
    id: page
    publish_initial_state: true
    internal: True

display:
  platform: tm1621
  id: tm1621_display
  cs_pin: GPIO25
  data_pin: GPIO14
  read_pin: GPIO26
  write_pin: GPIO27
  lambda: |-
    if (id(page).state) {
      it.display_voltage(true);
      it.display_kwh(false);
      it.printf(0, "%.1f", id(v_sensor).state);
      it.printf(1, "%.1f", id(a_sensor).state);
    } else {  
      it.display_voltage(false);
      it.display_kwh(true);
      it.printf(0, "%.1f", id(wh_sensor).state);
      it.printf(1, "%.1f", id(w_sensor).state);
    }

# output:
#   - platform: ledc
#     id: led
#     pin:
#       number: GPIO18
#       inverted: True

switch:
  - platform: gpio
    name: ${node_name} Relay State
    pin: GPIO13
    id: myRelay
    restore_mode: RESTORE_DEFAULT_OFF
    on_turn_on:
      - delay: 500ms
      - light.turn_on: myRelayStatusLED
    on_turn_off:
      - delay: 500ms
      - light.turn_off: myRelayStatusLED
  - platform: restart
    id: myRestartSwitch

light:
  # - platform: monochromatic
  #   id: switch_led
  #   output: led
  #   internal: True
  - platform: status_led
    id: myRelayStatusLED
    internal: true
    pin:
      number: GPIO18
      inverted: true
  - platform: status_led
    id: myWiFiStatusLED
    internal: True
    pin:
      number: GPIO05
      inverted: True

# interval:
#   - interval: 30s
#     then:
#       if:
#         condition:
#           wifi.connected:
#         then:
#           - light.turn_on: myWiFiStatusLED
#         else:
#           - light.turn_off: myWiFiStatusLED